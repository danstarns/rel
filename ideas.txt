{
  schema: {
    Author: {
      fields: {
        name: string(),
      },
    },
  },
  jobs: {
    hourlyDoCalculations: {
      cron: "...",
      handler: (job) => {
        ...
      }
    }
  }
}


=========
old

// types

const typeExample = {
Author: {
fields: {
name: string().required(),
optional: string()
},
}
}

// generates GQL

type Author {
id: UUID!
name: String!mark
optional: String
createdAt: DateTime!
updatedAt: DateTime!
}

// ##################################################################
// listing

const readingExample = {

}

// generates GQL

type Author {
id: UUID!
name: String!
createdAt: DateTime!
updatedAt: DateTime!
}

type Query {
Authors(limit: Int, skip: Int, order: String): [Author]!
}

// ##################################################################
// finding

const findingExample = {
Author: {
fields: {
name: string().required(),
},
crud: {
find: true
}
}
}

// generates GQL

type Author {
name: String!
}

type Query {
Author(id: UUID!): Author
}

// ##################################################################
// reading with mutiple match fields

const multipleFieldsFindingExample = {
Author: {
fields: {
name: string().required(),
},
crud: {
find: {
match: ["id", "name"]
}
}
}
}

// generates GQL

type Author {
name: String!
}

type Query {
Author(id: UUID, name: String): Author
}

// ##################################################################
// Mutability

const mutabilityExample = {
Author: {
fields: {
name: string().required(),
},
crud: {
create: true,
merge: true,
update: true,
delete: true,
}
}
}

// generates GQL

type Author {
name: String!
}

type Query {
CreateAuthor(fields: AuthorInput!): Author
MergeAuthor(id: UUID!, fields: AuthorInput!): Author
UpdateAuthor(id: UUID!, fields: AuthorInput!): Author
DeleteAuthor(id: UUID!): Author
}

// ##################################################################
// Associations

const associationsExample = {
Author: {
crud: {
find: {
match: ["id"],
},
},
fields: {
name: string().required(),
},
relations: {
firstBook: {
from: {
label: "User",
params: ({ obj }) => ({ id: obj.id }),
},
rel: {
label: "AUTHORED",
},
to: {
label: "Book",
},
singular: true,
order: "to.createdAt DESC",
},
books: {
from: {
label: "User",
params: ({ obj }) => ({ id: obj.id }),
},
rel: {
label: "AUTHORED",
},
to: {
label: "Book",
},
},
},
},
Book: {
fields: {
name: string().required(),
},
},
}

// Generates GraphQL

type Author {
name: String!
firstBook: Book
books: [Book]!
}

type Book {
name: String!
}

type Query {
Author(id: String!): Author
}

type Mutation {
AddAuthorBook(from: UUID, to: UUID): Book
}

// ##################################################################
// Polymorphism

const polymorphicExample = {
Author: {
fields: {
name: string(),
},
},
Book: {
fields: {
name: string(),
},
},
Person: {
crud: {
find: true,
},
fields: {
name: string(),
},
relations: {
favorites: {
from: {
label: "Person",
params: ({ obj }) => ({ id: obj.id }),
},
rel: {
label: "FAVORITE",
},
to: {
label: ["Restaurant", "Guide"],
},
fields: {
bucket: string(),
},
},
},
},
}

// Generates GQL

type Author {
name: String!
}

type Book {
name: String!
}

type Query {
Author(id: String!): Author
}

type Mutation {
AddAuthorBook(from: UUID, to: UUID): Book
}
